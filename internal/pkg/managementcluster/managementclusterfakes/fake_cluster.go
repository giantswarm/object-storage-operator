// Code generated by counterfeiter. DO NOT EDIT.
package managementclusterfakes

import (
	"context"
	"sync"

	"github.com/giantswarm/object-storage-operator/internal/pkg/managementcluster"
	"github.com/giantswarm/object-storage-operator/internal/pkg/service/objectstorage"
	"github.com/go-logr/logr"
)

type FakeCluster struct {
	NewAccessRoleServiceStub        func(context.Context, logr.Logger) (objectstorage.AccessRoleService, error)
	newAccessRoleServiceMutex       sync.RWMutex
	newAccessRoleServiceArgsForCall []struct {
		arg1 context.Context
		arg2 logr.Logger
	}
	newAccessRoleServiceReturns struct {
		result1 objectstorage.AccessRoleService
		result2 error
	}
	newAccessRoleServiceReturnsOnCall map[int]struct {
		result1 objectstorage.AccessRoleService
		result2 error
	}
	NewObjectStorageServiceStub        func(context.Context, logr.Logger) (objectstorage.ObjectStorageService, error)
	newObjectStorageServiceMutex       sync.RWMutex
	newObjectStorageServiceArgsForCall []struct {
		arg1 context.Context
		arg2 logr.Logger
	}
	newObjectStorageServiceReturns struct {
		result1 objectstorage.ObjectStorageService
		result2 error
	}
	newObjectStorageServiceReturnsOnCall map[int]struct {
		result1 objectstorage.ObjectStorageService
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCluster) NewAccessRoleService(arg1 context.Context, arg2 logr.Logger) (objectstorage.AccessRoleService, error) {
	fake.newAccessRoleServiceMutex.Lock()
	ret, specificReturn := fake.newAccessRoleServiceReturnsOnCall[len(fake.newAccessRoleServiceArgsForCall)]
	fake.newAccessRoleServiceArgsForCall = append(fake.newAccessRoleServiceArgsForCall, struct {
		arg1 context.Context
		arg2 logr.Logger
	}{arg1, arg2})
	stub := fake.NewAccessRoleServiceStub
	fakeReturns := fake.newAccessRoleServiceReturns
	fake.recordInvocation("NewAccessRoleService", []interface{}{arg1, arg2})
	fake.newAccessRoleServiceMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCluster) NewAccessRoleServiceCallCount() int {
	fake.newAccessRoleServiceMutex.RLock()
	defer fake.newAccessRoleServiceMutex.RUnlock()
	return len(fake.newAccessRoleServiceArgsForCall)
}

func (fake *FakeCluster) NewAccessRoleServiceCalls(stub func(context.Context, logr.Logger) (objectstorage.AccessRoleService, error)) {
	fake.newAccessRoleServiceMutex.Lock()
	defer fake.newAccessRoleServiceMutex.Unlock()
	fake.NewAccessRoleServiceStub = stub
}

func (fake *FakeCluster) NewAccessRoleServiceArgsForCall(i int) (context.Context, logr.Logger) {
	fake.newAccessRoleServiceMutex.RLock()
	defer fake.newAccessRoleServiceMutex.RUnlock()
	argsForCall := fake.newAccessRoleServiceArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCluster) NewAccessRoleServiceReturns(result1 objectstorage.AccessRoleService, result2 error) {
	fake.newAccessRoleServiceMutex.Lock()
	defer fake.newAccessRoleServiceMutex.Unlock()
	fake.NewAccessRoleServiceStub = nil
	fake.newAccessRoleServiceReturns = struct {
		result1 objectstorage.AccessRoleService
		result2 error
	}{result1, result2}
}

func (fake *FakeCluster) NewAccessRoleServiceReturnsOnCall(i int, result1 objectstorage.AccessRoleService, result2 error) {
	fake.newAccessRoleServiceMutex.Lock()
	defer fake.newAccessRoleServiceMutex.Unlock()
	fake.NewAccessRoleServiceStub = nil
	if fake.newAccessRoleServiceReturnsOnCall == nil {
		fake.newAccessRoleServiceReturnsOnCall = make(map[int]struct {
			result1 objectstorage.AccessRoleService
			result2 error
		})
	}
	fake.newAccessRoleServiceReturnsOnCall[i] = struct {
		result1 objectstorage.AccessRoleService
		result2 error
	}{result1, result2}
}

func (fake *FakeCluster) NewObjectStorageService(arg1 context.Context, arg2 logr.Logger) (objectstorage.ObjectStorageService, error) {
	fake.newObjectStorageServiceMutex.Lock()
	ret, specificReturn := fake.newObjectStorageServiceReturnsOnCall[len(fake.newObjectStorageServiceArgsForCall)]
	fake.newObjectStorageServiceArgsForCall = append(fake.newObjectStorageServiceArgsForCall, struct {
		arg1 context.Context
		arg2 logr.Logger
	}{arg1, arg2})
	stub := fake.NewObjectStorageServiceStub
	fakeReturns := fake.newObjectStorageServiceReturns
	fake.recordInvocation("NewObjectStorageService", []interface{}{arg1, arg2})
	fake.newObjectStorageServiceMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCluster) NewObjectStorageServiceCallCount() int {
	fake.newObjectStorageServiceMutex.RLock()
	defer fake.newObjectStorageServiceMutex.RUnlock()
	return len(fake.newObjectStorageServiceArgsForCall)
}

func (fake *FakeCluster) NewObjectStorageServiceCalls(stub func(context.Context, logr.Logger) (objectstorage.ObjectStorageService, error)) {
	fake.newObjectStorageServiceMutex.Lock()
	defer fake.newObjectStorageServiceMutex.Unlock()
	fake.NewObjectStorageServiceStub = stub
}

func (fake *FakeCluster) NewObjectStorageServiceArgsForCall(i int) (context.Context, logr.Logger) {
	fake.newObjectStorageServiceMutex.RLock()
	defer fake.newObjectStorageServiceMutex.RUnlock()
	argsForCall := fake.newObjectStorageServiceArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCluster) NewObjectStorageServiceReturns(result1 objectstorage.ObjectStorageService, result2 error) {
	fake.newObjectStorageServiceMutex.Lock()
	defer fake.newObjectStorageServiceMutex.Unlock()
	fake.NewObjectStorageServiceStub = nil
	fake.newObjectStorageServiceReturns = struct {
		result1 objectstorage.ObjectStorageService
		result2 error
	}{result1, result2}
}

func (fake *FakeCluster) NewObjectStorageServiceReturnsOnCall(i int, result1 objectstorage.ObjectStorageService, result2 error) {
	fake.newObjectStorageServiceMutex.Lock()
	defer fake.newObjectStorageServiceMutex.Unlock()
	fake.NewObjectStorageServiceStub = nil
	if fake.newObjectStorageServiceReturnsOnCall == nil {
		fake.newObjectStorageServiceReturnsOnCall = make(map[int]struct {
			result1 objectstorage.ObjectStorageService
			result2 error
		})
	}
	fake.newObjectStorageServiceReturnsOnCall[i] = struct {
		result1 objectstorage.ObjectStorageService
		result2 error
	}{result1, result2}
}

func (fake *FakeCluster) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.newAccessRoleServiceMutex.RLock()
	defer fake.newAccessRoleServiceMutex.RUnlock()
	fake.newObjectStorageServiceMutex.RLock()
	defer fake.newObjectStorageServiceMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCluster) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ managementcluster.Cluster = new(FakeCluster)
