// Code generated by counterfeiter. DO NOT EDIT.
package objectstoragefakes

import (
	"context"
	"sync"

	"github.com/giantswarm/object-storage-operator/api/v1alpha1"
	"github.com/giantswarm/object-storage-operator/internal/pkg/service/objectstorage"
)

type FakeObjectStorageService struct {
	ConfigureBucketStub        func(context.Context, *v1alpha1.Bucket, map[string]string) error
	configureBucketMutex       sync.RWMutex
	configureBucketArgsForCall []struct {
		arg1 context.Context
		arg2 *v1alpha1.Bucket
		arg3 map[string]string
	}
	configureBucketReturns struct {
		result1 error
	}
	configureBucketReturnsOnCall map[int]struct {
		result1 error
	}
	CreateBucketStub        func(context.Context, *v1alpha1.Bucket) error
	createBucketMutex       sync.RWMutex
	createBucketArgsForCall []struct {
		arg1 context.Context
		arg2 *v1alpha1.Bucket
	}
	createBucketReturns struct {
		result1 error
	}
	createBucketReturnsOnCall map[int]struct {
		result1 error
	}
	DeleteBucketStub        func(context.Context, *v1alpha1.Bucket) error
	deleteBucketMutex       sync.RWMutex
	deleteBucketArgsForCall []struct {
		arg1 context.Context
		arg2 *v1alpha1.Bucket
	}
	deleteBucketReturns struct {
		result1 error
	}
	deleteBucketReturnsOnCall map[int]struct {
		result1 error
	}
	ExistsBucketStub        func(context.Context, *v1alpha1.Bucket) (bool, error)
	existsBucketMutex       sync.RWMutex
	existsBucketArgsForCall []struct {
		arg1 context.Context
		arg2 *v1alpha1.Bucket
	}
	existsBucketReturns struct {
		result1 bool
		result2 error
	}
	existsBucketReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeObjectStorageService) ConfigureBucket(arg1 context.Context, arg2 *v1alpha1.Bucket, arg3 map[string]string) error {
	fake.configureBucketMutex.Lock()
	ret, specificReturn := fake.configureBucketReturnsOnCall[len(fake.configureBucketArgsForCall)]
	fake.configureBucketArgsForCall = append(fake.configureBucketArgsForCall, struct {
		arg1 context.Context
		arg2 *v1alpha1.Bucket
		arg3 map[string]string
	}{arg1, arg2, arg3})
	stub := fake.ConfigureBucketStub
	fakeReturns := fake.configureBucketReturns
	fake.recordInvocation("ConfigureBucket", []interface{}{arg1, arg2, arg3})
	fake.configureBucketMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeObjectStorageService) ConfigureBucketCallCount() int {
	fake.configureBucketMutex.RLock()
	defer fake.configureBucketMutex.RUnlock()
	return len(fake.configureBucketArgsForCall)
}

func (fake *FakeObjectStorageService) ConfigureBucketCalls(stub func(context.Context, *v1alpha1.Bucket, map[string]string) error) {
	fake.configureBucketMutex.Lock()
	defer fake.configureBucketMutex.Unlock()
	fake.ConfigureBucketStub = stub
}

func (fake *FakeObjectStorageService) ConfigureBucketArgsForCall(i int) (context.Context, *v1alpha1.Bucket, map[string]string) {
	fake.configureBucketMutex.RLock()
	defer fake.configureBucketMutex.RUnlock()
	argsForCall := fake.configureBucketArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeObjectStorageService) ConfigureBucketReturns(result1 error) {
	fake.configureBucketMutex.Lock()
	defer fake.configureBucketMutex.Unlock()
	fake.ConfigureBucketStub = nil
	fake.configureBucketReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeObjectStorageService) ConfigureBucketReturnsOnCall(i int, result1 error) {
	fake.configureBucketMutex.Lock()
	defer fake.configureBucketMutex.Unlock()
	fake.ConfigureBucketStub = nil
	if fake.configureBucketReturnsOnCall == nil {
		fake.configureBucketReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.configureBucketReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeObjectStorageService) CreateBucket(arg1 context.Context, arg2 *v1alpha1.Bucket) error {
	fake.createBucketMutex.Lock()
	ret, specificReturn := fake.createBucketReturnsOnCall[len(fake.createBucketArgsForCall)]
	fake.createBucketArgsForCall = append(fake.createBucketArgsForCall, struct {
		arg1 context.Context
		arg2 *v1alpha1.Bucket
	}{arg1, arg2})
	stub := fake.CreateBucketStub
	fakeReturns := fake.createBucketReturns
	fake.recordInvocation("CreateBucket", []interface{}{arg1, arg2})
	fake.createBucketMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeObjectStorageService) CreateBucketCallCount() int {
	fake.createBucketMutex.RLock()
	defer fake.createBucketMutex.RUnlock()
	return len(fake.createBucketArgsForCall)
}

func (fake *FakeObjectStorageService) CreateBucketCalls(stub func(context.Context, *v1alpha1.Bucket) error) {
	fake.createBucketMutex.Lock()
	defer fake.createBucketMutex.Unlock()
	fake.CreateBucketStub = stub
}

func (fake *FakeObjectStorageService) CreateBucketArgsForCall(i int) (context.Context, *v1alpha1.Bucket) {
	fake.createBucketMutex.RLock()
	defer fake.createBucketMutex.RUnlock()
	argsForCall := fake.createBucketArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeObjectStorageService) CreateBucketReturns(result1 error) {
	fake.createBucketMutex.Lock()
	defer fake.createBucketMutex.Unlock()
	fake.CreateBucketStub = nil
	fake.createBucketReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeObjectStorageService) CreateBucketReturnsOnCall(i int, result1 error) {
	fake.createBucketMutex.Lock()
	defer fake.createBucketMutex.Unlock()
	fake.CreateBucketStub = nil
	if fake.createBucketReturnsOnCall == nil {
		fake.createBucketReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.createBucketReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeObjectStorageService) DeleteBucket(arg1 context.Context, arg2 *v1alpha1.Bucket) error {
	fake.deleteBucketMutex.Lock()
	ret, specificReturn := fake.deleteBucketReturnsOnCall[len(fake.deleteBucketArgsForCall)]
	fake.deleteBucketArgsForCall = append(fake.deleteBucketArgsForCall, struct {
		arg1 context.Context
		arg2 *v1alpha1.Bucket
	}{arg1, arg2})
	stub := fake.DeleteBucketStub
	fakeReturns := fake.deleteBucketReturns
	fake.recordInvocation("DeleteBucket", []interface{}{arg1, arg2})
	fake.deleteBucketMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeObjectStorageService) DeleteBucketCallCount() int {
	fake.deleteBucketMutex.RLock()
	defer fake.deleteBucketMutex.RUnlock()
	return len(fake.deleteBucketArgsForCall)
}

func (fake *FakeObjectStorageService) DeleteBucketCalls(stub func(context.Context, *v1alpha1.Bucket) error) {
	fake.deleteBucketMutex.Lock()
	defer fake.deleteBucketMutex.Unlock()
	fake.DeleteBucketStub = stub
}

func (fake *FakeObjectStorageService) DeleteBucketArgsForCall(i int) (context.Context, *v1alpha1.Bucket) {
	fake.deleteBucketMutex.RLock()
	defer fake.deleteBucketMutex.RUnlock()
	argsForCall := fake.deleteBucketArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeObjectStorageService) DeleteBucketReturns(result1 error) {
	fake.deleteBucketMutex.Lock()
	defer fake.deleteBucketMutex.Unlock()
	fake.DeleteBucketStub = nil
	fake.deleteBucketReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeObjectStorageService) DeleteBucketReturnsOnCall(i int, result1 error) {
	fake.deleteBucketMutex.Lock()
	defer fake.deleteBucketMutex.Unlock()
	fake.DeleteBucketStub = nil
	if fake.deleteBucketReturnsOnCall == nil {
		fake.deleteBucketReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteBucketReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeObjectStorageService) ExistsBucket(arg1 context.Context, arg2 *v1alpha1.Bucket) (bool, error) {
	fake.existsBucketMutex.Lock()
	ret, specificReturn := fake.existsBucketReturnsOnCall[len(fake.existsBucketArgsForCall)]
	fake.existsBucketArgsForCall = append(fake.existsBucketArgsForCall, struct {
		arg1 context.Context
		arg2 *v1alpha1.Bucket
	}{arg1, arg2})
	stub := fake.ExistsBucketStub
	fakeReturns := fake.existsBucketReturns
	fake.recordInvocation("ExistsBucket", []interface{}{arg1, arg2})
	fake.existsBucketMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeObjectStorageService) ExistsBucketCallCount() int {
	fake.existsBucketMutex.RLock()
	defer fake.existsBucketMutex.RUnlock()
	return len(fake.existsBucketArgsForCall)
}

func (fake *FakeObjectStorageService) ExistsBucketCalls(stub func(context.Context, *v1alpha1.Bucket) (bool, error)) {
	fake.existsBucketMutex.Lock()
	defer fake.existsBucketMutex.Unlock()
	fake.ExistsBucketStub = stub
}

func (fake *FakeObjectStorageService) ExistsBucketArgsForCall(i int) (context.Context, *v1alpha1.Bucket) {
	fake.existsBucketMutex.RLock()
	defer fake.existsBucketMutex.RUnlock()
	argsForCall := fake.existsBucketArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeObjectStorageService) ExistsBucketReturns(result1 bool, result2 error) {
	fake.existsBucketMutex.Lock()
	defer fake.existsBucketMutex.Unlock()
	fake.ExistsBucketStub = nil
	fake.existsBucketReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeObjectStorageService) ExistsBucketReturnsOnCall(i int, result1 bool, result2 error) {
	fake.existsBucketMutex.Lock()
	defer fake.existsBucketMutex.Unlock()
	fake.ExistsBucketStub = nil
	if fake.existsBucketReturnsOnCall == nil {
		fake.existsBucketReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.existsBucketReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeObjectStorageService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.configureBucketMutex.RLock()
	defer fake.configureBucketMutex.RUnlock()
	fake.createBucketMutex.RLock()
	defer fake.createBucketMutex.RUnlock()
	fake.deleteBucketMutex.RLock()
	defer fake.deleteBucketMutex.RUnlock()
	fake.existsBucketMutex.RLock()
	defer fake.existsBucketMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeObjectStorageService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ objectstorage.ObjectStorageService = new(FakeObjectStorageService)
