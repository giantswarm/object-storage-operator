// Code generated by counterfeiter. DO NOT EDIT.
package objectstoragefakes

import (
	"context"
	"sync"

	"github.com/giantswarm/object-storage-operator/api/v1alpha1"
	"github.com/giantswarm/object-storage-operator/internal/pkg/service/objectstorage"
)

type FakeAccessRoleService struct {
	ConfigureRoleStub        func(context.Context, *v1alpha1.Bucket, map[string]string) error
	configureRoleMutex       sync.RWMutex
	configureRoleArgsForCall []struct {
		arg1 context.Context
		arg2 *v1alpha1.Bucket
		arg3 map[string]string
	}
	configureRoleReturns struct {
		result1 error
	}
	configureRoleReturnsOnCall map[int]struct {
		result1 error
	}
	DeleteRoleStub        func(context.Context, *v1alpha1.Bucket) error
	deleteRoleMutex       sync.RWMutex
	deleteRoleArgsForCall []struct {
		arg1 context.Context
		arg2 *v1alpha1.Bucket
	}
	deleteRoleReturns struct {
		result1 error
	}
	deleteRoleReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeAccessRoleService) ConfigureRole(arg1 context.Context, arg2 *v1alpha1.Bucket, arg3 map[string]string) error {
	fake.configureRoleMutex.Lock()
	ret, specificReturn := fake.configureRoleReturnsOnCall[len(fake.configureRoleArgsForCall)]
	fake.configureRoleArgsForCall = append(fake.configureRoleArgsForCall, struct {
		arg1 context.Context
		arg2 *v1alpha1.Bucket
		arg3 map[string]string
	}{arg1, arg2, arg3})
	stub := fake.ConfigureRoleStub
	fakeReturns := fake.configureRoleReturns
	fake.recordInvocation("ConfigureRole", []interface{}{arg1, arg2, arg3})
	fake.configureRoleMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeAccessRoleService) ConfigureRoleCallCount() int {
	fake.configureRoleMutex.RLock()
	defer fake.configureRoleMutex.RUnlock()
	return len(fake.configureRoleArgsForCall)
}

func (fake *FakeAccessRoleService) ConfigureRoleCalls(stub func(context.Context, *v1alpha1.Bucket, map[string]string) error) {
	fake.configureRoleMutex.Lock()
	defer fake.configureRoleMutex.Unlock()
	fake.ConfigureRoleStub = stub
}

func (fake *FakeAccessRoleService) ConfigureRoleArgsForCall(i int) (context.Context, *v1alpha1.Bucket, map[string]string) {
	fake.configureRoleMutex.RLock()
	defer fake.configureRoleMutex.RUnlock()
	argsForCall := fake.configureRoleArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeAccessRoleService) ConfigureRoleReturns(result1 error) {
	fake.configureRoleMutex.Lock()
	defer fake.configureRoleMutex.Unlock()
	fake.ConfigureRoleStub = nil
	fake.configureRoleReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeAccessRoleService) ConfigureRoleReturnsOnCall(i int, result1 error) {
	fake.configureRoleMutex.Lock()
	defer fake.configureRoleMutex.Unlock()
	fake.ConfigureRoleStub = nil
	if fake.configureRoleReturnsOnCall == nil {
		fake.configureRoleReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.configureRoleReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeAccessRoleService) DeleteRole(arg1 context.Context, arg2 *v1alpha1.Bucket) error {
	fake.deleteRoleMutex.Lock()
	ret, specificReturn := fake.deleteRoleReturnsOnCall[len(fake.deleteRoleArgsForCall)]
	fake.deleteRoleArgsForCall = append(fake.deleteRoleArgsForCall, struct {
		arg1 context.Context
		arg2 *v1alpha1.Bucket
	}{arg1, arg2})
	stub := fake.DeleteRoleStub
	fakeReturns := fake.deleteRoleReturns
	fake.recordInvocation("DeleteRole", []interface{}{arg1, arg2})
	fake.deleteRoleMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeAccessRoleService) DeleteRoleCallCount() int {
	fake.deleteRoleMutex.RLock()
	defer fake.deleteRoleMutex.RUnlock()
	return len(fake.deleteRoleArgsForCall)
}

func (fake *FakeAccessRoleService) DeleteRoleCalls(stub func(context.Context, *v1alpha1.Bucket) error) {
	fake.deleteRoleMutex.Lock()
	defer fake.deleteRoleMutex.Unlock()
	fake.DeleteRoleStub = stub
}

func (fake *FakeAccessRoleService) DeleteRoleArgsForCall(i int) (context.Context, *v1alpha1.Bucket) {
	fake.deleteRoleMutex.RLock()
	defer fake.deleteRoleMutex.RUnlock()
	argsForCall := fake.deleteRoleArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeAccessRoleService) DeleteRoleReturns(result1 error) {
	fake.deleteRoleMutex.Lock()
	defer fake.deleteRoleMutex.Unlock()
	fake.DeleteRoleStub = nil
	fake.deleteRoleReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeAccessRoleService) DeleteRoleReturnsOnCall(i int, result1 error) {
	fake.deleteRoleMutex.Lock()
	defer fake.deleteRoleMutex.Unlock()
	fake.DeleteRoleStub = nil
	if fake.deleteRoleReturnsOnCall == nil {
		fake.deleteRoleReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteRoleReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeAccessRoleService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.configureRoleMutex.RLock()
	defer fake.configureRoleMutex.RUnlock()
	fake.deleteRoleMutex.RLock()
	defer fake.deleteRoleMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeAccessRoleService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ objectstorage.AccessRoleService = new(FakeAccessRoleService)
